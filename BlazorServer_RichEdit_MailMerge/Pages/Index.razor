@page "/"
@using System.IO
@using DevExpress.XtraRichEdit
@using MimeKit;
@using MailKit.Net.Smtp

@inject IJSRuntime JS

<div class="container">
    <div class="card mt-3">
        <div class="card-header">
            RichEdit Mail-Merge
        </div>
        <div class="card-body px-0">
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <Template>
                        <p>
                            This example uses the <a href=" https://www.devexpress.com/products/net/office-file-api/">RichEdit Document API</a>
                            to generate a e-mails by template. Specify sender, click  <b>"Send e-mails"</b> for sending e-mails for all recipients
                            or <b>"Download"</b> for download attachment for specify recipient.
                        </p>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Send email from:" ColSpanMd="4">
                    <Template>
                        <DxComboBox Data="@dataSource.SenderList" TextFieldName="FullName" @bind-SelectedItem="@SelectedSender" CssClass="p-0" />
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem>
                    <Template>
                        <DxButton Click="SendEmails" Text="@sendEmailsButtonText" Enabled="@sendEmailsButtonEnabled" />
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
            <div class="col">
                <DxDataGrid Data="@dataSource.RecipientList" SelectionMode="DataGridSelectionMode.None" CssClass="mt-3" ShowPager="false">
                    <DxDataGridColumn Field="@nameof(Recipient.ContactName)" Caption="Recipient" />
                    <DxDataGridColumn Field="@nameof(Recipient.Email)" Caption="Email" />
                    <DxDataGridColumn Caption="Attachment" Width="150px">
                        <DisplayTemplate>
                            @{
                                Recipient recipient = context as Recipient;
                                <DxButton Click="@((MouseEventArgs args) => DownloadPdf(recipient))" Text="Download" CssClass="btn-block" />
                            }
                        </DisplayTemplate>
                    </DxDataGridColumn>
                </DxDataGrid>
            </div>
        </div>
    </div>
</div>

@code {
    int currentRecipientIndex = 0;
    RichEditDocumentServer documentServer;
    SampleData dataSource;
    Sender selectedSender;

    string sendEmailsButtonText = "Send e-mails";
    bool sendEmailsButtonEnabled = true;

    Sender SelectedSender {
        get => selectedSender;
        set { selectedSender = value; InvokeAsync(StateHasChanged); }
    }

    protected override Task OnInitializedAsync() {
        documentServer = new RichEditDocumentServer();
        dataSource = new SampleData();
        selectedSender = dataSource.SenderList[0];
        documentServer.LoadDocument("Data/MailMerge.rtf", DocumentFormat.Rtf);
        return base.OnInitializedAsync();
    }

    void UpdateSendEmailsButton(string text, bool enabled) {
        sendEmailsButtonText = text;
        sendEmailsButtonEnabled = enabled;
        InvokeAsync(StateHasChanged);
    }

    async void SendEmails(MouseEventArgs mouseEventArgs) {
        UpdateSendEmailsButton("E-mails sending...", false);
        List<Recipient> recipientList = dataSource.RecipientList;

        for (int i = 0; i < recipientList.Count; i++) {
            using (MemoryStream attachmentStream = CreateAttachmentStream(recipientList[i])) {
                MimeMessage message = CreateMessage("<YOUR_MAIL>", recipientList[i], attachmentStream);
                await SendEmail(message);
            }
        }
        UpdateSendEmailsButton("Send e-mails", true);
    }

    void DownloadPdf(Recipient recipient) {
        using (MemoryStream stream = CreateAttachmentStream(recipient)) {
            JS.InvokeVoidAsync("exportToPdf", "output.pdf", Convert.ToBase64String(stream.ToArray()));
        }
    }

    MemoryStream CreateAttachmentStream(Recipient recipient) {
        using (RichEditDocumentServer resultDocumentServer = new RichEditDocumentServer()) {
            MemoryStream stream = new MemoryStream();
            documentServer.Options.MailMerge.DataSource = dataSource.GetDataSource(selectedSender, recipient);
            documentServer.Options.MailMerge.ViewMergedData = true;
            documentServer.MailMerge(resultDocumentServer.Document);
            resultDocumentServer.ExportToPdf(stream);
            stream.Seek(0, SeekOrigin.Begin);
            return stream;
        }
    }

    MimeMessage CreateMessage(string from, Recipient recipient, MemoryStream attachmentStream = null) {
        var message = new MimeMessage();
        message.From.Add(new MailboxAddress(SelectedSender.FullName, from));
        message.To.Add(new MailboxAddress(recipient.ContactName, recipient.Email));
        message.Subject = "Some subject";

        var body = new TextPart() {
            Text = @"Some text body"
        };

        var attachment = new MimePart("application", "pdf") {
            Content = new MimeContent(attachmentStream, ContentEncoding.Default),
            ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
            ContentTransferEncoding = ContentEncoding.Base64,
            FileName = "attachment.pdf"
        };

        var multipart = new Multipart("mixed");
        multipart.Add(body);
        multipart.Add(attachment);

        message.Body = multipart;

        return message;
    }

    async Task SendEmail(MimeMessage message) {
        using (var client = new SmtpClient()) {
            client.Connect("<SMTP_SERVER>", 587, false); // port is 25, 465, 587 or 2525

            // Note: only needed if the SMTP server requires authentication
            await client.AuthenticateAsync("<USERNAME>", "<PASSWORD>");

            try {
                await client.SendAsync(message);
            }
            catch (Exception e) {
            }
            finally {
                await client.DisconnectAsync(true);
            }
        }
    }
}

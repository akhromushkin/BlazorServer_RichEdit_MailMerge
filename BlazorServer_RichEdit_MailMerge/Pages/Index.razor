@page "/"
@using System.IO
@using System.Net
@using System.Net.Mail
@using System.Net.Mime
@using DevExpress.XtraRichEdit

@inject IJSRuntime JS

<div class="container">
    <div class="card mt-3">
        <div class="card-header">
            RichEdit Mail-Merge
        </div>
        <div class="card-body px-0">
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <Template>
                        <p>
                            This example uses the <a href=" https://www.devexpress.com/products/net/office-file-api/">RichEdit Document API</a>
                            to generate a e-mails by template. Specify sender, click  <b>"Send e-mails"</b> for sending e-mails for all recipients
                            or <b>"Download"</b> for download attachment for specify recipient. @dataSource.RecipientList[6].ContactName
                        </p>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Send email from:" ColSpanMd="4">
                    <Template>
                        <DxComboBox Data="@dataSource.SenderList" TextFieldName="FullName" @bind-SelectedItem="@SelectedSender" CssClass="p-0" />
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem>
                    <Template>
                        <DxButton Click="SendEmails" Text="Send e-mails" />
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
            <div class="col">
                <DxDataGrid Data="@dataSource.RecipientList" SelectionMode="DataGridSelectionMode.None" CssClass="mt-3" ShowPager="false">
                    <DxDataGridColumn Field="@nameof(Recipient.ContactName)" Caption="Recipient" />
                    <DxDataGridColumn Field="@nameof(Recipient.Email)" Caption="Email" />
                    <DxDataGridColumn Caption="Attachment" Width="150px">
                        <DisplayTemplate>
                            @{
                                Recipient recipient = context as Recipient;
                                <DxButton Click="@((MouseEventArgs args) => DownloadPdf(recipient))" Text="Download" CssClass="btn-block" />
                            }
                        </DisplayTemplate>
                    </DxDataGridColumn>
                </DxDataGrid>
            </div>
        </div>
    </div>
</div>

@code {
    int currentRecipientIndex = 0;
    RichEditDocumentServer documentServer;
    SampleData dataSource;
    Sender selectedSender;

    Sender SelectedSender {
        get => selectedSender;
        set { selectedSender = value; InvokeAsync(StateHasChanged); }
    }

    protected override Task OnInitializedAsync() {
        documentServer = new RichEditDocumentServer();
        dataSource = new SampleData();
        selectedSender = dataSource.SenderList[0];
        documentServer.LoadDocument("Data/MailMerge.rtf", DocumentFormat.Rtf);
        return base.OnInitializedAsync();
    }

    void SendEmails(MouseEventArgs mouseEventArgs) {
        List<Recipient> recipientList = dataSource.RecipientList;

        for (int i = 0; i < recipientList.Count; i++) {
            using (MemoryStream stream = CreateAttachment(recipientList[i])) {
                ContentType contentType = new ContentType(MediaTypeNames.Application.Pdf);
                Attachment attachment = new Attachment(stream, contentType);
                attachment.ContentDisposition.FileName = "attachment.pdf";

                MailMessage message = CreateMessage("YOUR_MAIL", recipientList[i].Email, attachment);
                SendEmail(message);
            }
        }
    }

    void DownloadPdf(Recipient recipient) {
        using (MemoryStream stream = CreateAttachment(recipient)) {
            JS.InvokeVoidAsync("exportToPdf", "output.pdf", Convert.ToBase64String(stream.ToArray()));
        }
    }

    MemoryStream CreateAttachment(Recipient recipient) {
        using (RichEditDocumentServer resultDocumentServer = new RichEditDocumentServer()) {
            MemoryStream stream = new MemoryStream();
            documentServer.Options.MailMerge.DataSource = dataSource.GetDataSource(selectedSender, recipient);
            documentServer.Options.MailMerge.ViewMergedData = true;
            documentServer.MailMerge(resultDocumentServer.Document);
            resultDocumentServer.ExportToPdf(stream);
            stream.Seek(0, SeekOrigin.Begin);
            return stream;
        }
    }

    MailMessage CreateMessage(string from, string to, Attachment attachment = null) {
        MailMessage message = new MailMessage(from, to);
        if (attachment != null)
            message.Attachments.Add(attachment);
        message.Subject = "Using the new SMTP client.";
        message.Body = @"Using this new feature, you can send an email message from an application very easily.";
        return message;
    }

    void SendEmail(MailMessage message) {
        using (SmtpClient client = new SmtpClient("SMTP_SERVER")) {
            client.Port = 25; // 25, 465, 587 or 2525
            client.Credentials = new NetworkCredential("USERNAME", "PASSWORD");
            client.EnableSsl = true;
            try {
                client.SendAsync(message, null);
            }
            catch (Exception e) {
            }
            // Credentials are necessary if the server requires the client
            // to authenticate before it will send email on the client's behalf.
            //client.UseDefaultCredentials = true;
        }
    }
}
